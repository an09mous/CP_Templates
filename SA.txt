    static int n,c[],p[],lcp[];
    static char s[];
    static void count_sort() {
    	int cnt[]=new int[n],pos[]=new int[n],p_new[]=new int[n];
    	for(int x: c) cnt[x]++;
    	pos[0]=0;
    	for(int i=1;i<n;i++) pos[i]=pos[i-1]+cnt[i-1];
    	for(int x: p) {
    		int i=c[x];
    		p_new[pos[i]]=x;
    		pos[i]++;
    	}
    	p=p_new;
    }
    static void buildSA() {
    	p=new int[n];c=new int[n];
    	//k=0
		int k=0;
		pair a[]=new pair[n];
		for(int i=0;i<n;i++) a[i]=new pair(s[i]-'a',i);
		Arrays.parallelSort(a,(p1,p2)->(int)(p1.x-p2.x));
		for(int i=0;i<n;i++) p[i]=(int)a[i].y;
		c[p[0]]=0;
		for(int i=1;i<n;i++) c[p[i]]=c[p[i-1]]+(s[p[i]]==s[p[i-1]]?0:1);
		//k>0
		while((1<<k)<n) {
			for(int i=0;i<n;i++) p[i]=(p[i]-(1<<k)+n)%n;
			count_sort();
			int c_new[]=new int[n];
			c_new[p[0]]=0;
			for(int i=1;i<n;i++) {
				int prev1=c[p[i-1]],prev2=c[(p[i-1]+(1<<k))%n];
				int cur1=c[p[i]],cur2=c[(p[i]+(1<<k))%n];
				if(prev1==cur1 && prev2==cur2) c_new[p[i]]=c_new[p[i-1]];
				else c_new[p[i]]=c_new[p[i-1]]+1;
			}
			c=c_new;
			k++;
		}
    }
    static void buildLCP() {
    	lcp=new int[n];
    	int k=0;
    	for(int i=0;i<n-1;i++) {
    		int pi=c[i];
    		int j=p[pi-1];
    		while(s[i+k]==s[j+k]) k++;
    		lcp[pi]=k;
    		k=Math.max(k-1, 0);
    	}
    }