    static class Complex{
    	double re,im;
    	Complex(double real,double imag){
    		re=real;
    		im=imag;
    	}
    	double abs() {
    		return Math.hypot(re, im);
    	}
    	Complex plus(Complex b) {
    		Complex a=this;
    		Complex res=new Complex(a.re+b.re,a.im+b.im);
    		return res;
    	}
    	Complex minus(Complex b) {
    		Complex a=this;
    		Complex res=new Complex(a.re-b.re,a.im-b.im);
    		return res;
    	}
    	Complex mult(double x) {
    		Complex a=this;
    		Complex res=new Complex(a.re*x,a.im*x);
    		return res;
    	}
    	Complex mult(Complex b) {
    		Complex a=this;
    		Complex res=new Complex(a.re*b.re-a.im*b.im,a.re*b.im+a.im*b.re);
    		return res;
    	}
    	Complex divideBy(double x) {
    		Complex a=this;
    		Complex res=new Complex(a.re/x,a.im/x);
    		return res;
    	}
    }
    static void fft(Complex a[],boolean invert) {
    	int n=a.length;
    	if(n==1) return;
    	Complex a_even[]=new Complex[n/2],a_odd[]=new Complex[n/2];
    	for(int i=0;2*i<n;i++) {
    		a_even[i]=a[2*i];
    		a_odd[i]=a[2*i+1];
    	}
    	fft(a_even,invert);
    	fft(a_odd,invert);
    	double theta=(2*Math.PI/n)*(invert?-1:1);
    	Complex w=new Complex(1,0),wn=new Complex(Math.cos(theta),Math.sin(theta));
    	for(int i=0;2*i<n;i++) {
    		a[i]=a_even[i].plus(w.mult(a_odd[i]));
    		a[i+n/2]=a_even[i].minus(w.mult(a_odd[i]));
    		if(invert) {
    			a[i]=a[i].divideBy(2);
    			a[i+n/2]=a[i+n/2].divideBy(2);
    		}
    		w=w.mult(wn);
    	}
    }
    static int[] mult(int a[],int b[]){
    	int n=1,NA=a.length,NB=b.length;
    	while(n<NA+NB) n<<=1;
    	Complex fa[]=new Complex[n],fb[]=new Complex[n];
    	for(int i=0;i<n;i++) {
    		fa[i]=new Complex(0,0);
    		fb[i]=new Complex(0,0);
    		if(i<NA) fa[i].re=a[i];
    		if(i<NB) fb[i].re=b[i];
    	}
    	fft(fa,false);
    	fft(fb,false);
    	for(int i=0;i<n;i++) {
    		fa[i]=fa[i].mult(fb[i]);
    	}
    	fft(fa,true);
    	int res[]=new int[n];
    	for(int i=0;i<n;i++) res[i]=(int)Math.round(fa[i].re);
    	return res;
    }