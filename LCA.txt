	    static int V,up[][],lvl[],log=18;
	    static ArrayList<Integer> graph[];
	    static void init(int n){
	        V=n;
	        up=new int[n][log];
	       	lvl=new int[n];
	        graph=new ArrayList[V];
	        for(int i=0;i<V;i++) graph[i]=new ArrayList<>();
	    }
	    static void addEdge(int src,int dest){
	        graph[src].add(dest);
	        graph[dest].add(src);
	    }
	    static void dfs(int s,int p) {
	    	up[s][0]=p;
	    	for(Integer x: graph[s]) {
	    		if(x==p) continue;
	    		lvl[x]=1+lvl[s];
	    		dfs(x,s);
	    	}
	    }
	    static void process() {
	    	for(int j=1;j<log;j++) {
    			for(int i=0;i<V;i++) {
    				if(up[i][j-1]==-1) continue;
    				up[i][j]=up[up[i][j-1]][j-1];
    			}
    		}
	    }
	    static int LCA(int u,int v) {
	    	if(lvl[u]<lvl[v]) {
	    		int tmp=u;
	    		u=v;
	    		v=tmp;
	    	}
	    	for(int i=log-1;i>=0;i--) {
	    		if(lvl[u]-(1<<i)>=lvl[v]) u=up[u][i];
	    	}
	    	if(u==v) return u;
	    	for(int i=log-1;i>=0;i--) {
	    		if(up[u][i]!=-1 && (up[u][i]!=up[v][i])) {
	    			u=up[u][i];
	    			v=up[v][i];
	    		}
	    	}
	    	return up[u][0];
	    }